cmake_minimum_required(VERSION 3.16)

project(ImGuiForms
    VERSION 1.0.0
    DESCRIPTION "Object-oriented C++ framework around Dear ImGui"
    LANGUAGES CXX
)

# Set C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Compiler-specific options
if(MSVC)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
else()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wpedantic")
endif()

# Build options
option(IMGUIFORMS_BUILD_EXAMPLES "Build example applications" ON)
option(IMGUIFORMS_BUILD_TESTS "Build unit tests" ON)
option(IMGUIFORMS_BUILD_DOCS "Build documentation" OFF)

# Find dependencies
find_package(OpenGL REQUIRED)

# Dear ImGui as submodule or find_package
if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/third_party/imgui/imgui.h")
    # Using ImGui as submodule
    set(IMGUI_DIR "${CMAKE_CURRENT_SOURCE_DIR}/third_party/imgui")
    
    # ImGui source files
    set(IMGUI_SOURCES
        ${IMGUI_DIR}/imgui.cpp
        ${IMGUI_DIR}/imgui_demo.cpp
        ${IMGUI_DIR}/imgui_draw.cpp
        ${IMGUI_DIR}/imgui_tables.cpp
        ${IMGUI_DIR}/imgui_widgets.cpp
        
        # Backend files (adjust based on your platform)
        ${IMGUI_DIR}/backends/imgui_impl_opengl3.cpp
        ${IMGUI_DIR}/backends/imgui_impl_glfw.cpp
    )
    
    # Create ImGui library target
    add_library(imgui STATIC ${IMGUI_SOURCES})
    target_include_directories(imgui PUBLIC 
        ${IMGUI_DIR}
        ${IMGUI_DIR}/backends
    )
    target_link_libraries(imgui PUBLIC OpenGL::GL)
    
    # Find GLFW for backends
    find_package(glfw3 REQUIRED)
    target_link_libraries(imgui PUBLIC glfw)
    
else()
    # Try to find ImGui as installed package
    find_package(imgui REQUIRED)
endif()

# ImGuiForms library sources
set(IMGUIFORMS_SOURCES
    # Core
    src/Core/Component.cpp
    
    # Components  
    src/Components/Panel.cpp
    src/Components/Label.cpp
    
    # Utils
    src/Utils/IdManager.cpp
    src/Utils/TextMeasure.cpp
    
    # Add more source files as they're implemented
)

# ImGuiForms library headers
set(IMGUIFORMS_HEADERS
    # Core
    include/ImGuiForms/Core/Coordinate.h
    include/ImGuiForms/Core/Size.h
    include/ImGuiForms/Core/Rectangle.h
    include/ImGuiForms/Core/Component.h
    
    # Components
    include/ImGuiForms/Components/Panel.h
    include/ImGuiForms/Components/Label.h
    
    # Main header
    include/ImGuiForms/ImGuiForms.h
)

# Create the ImGuiForms library
add_library(ImGuiForms STATIC ${IMGUIFORMS_SOURCES} ${IMGUIFORMS_HEADERS})

# Set target properties
target_include_directories(ImGuiForms
    PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
        $<INSTALL_INTERFACE:include>
    PRIVATE
        ${CMAKE_CURRENT_SOURCE_DIR}/src
)

# Link dependencies
target_link_libraries(ImGuiForms 
    PUBLIC imgui
    PRIVATE OpenGL::GL
)

# Set compile features
target_compile_features(ImGuiForms PUBLIC cxx_std_17)

# Platform-specific settings
if(WIN32)
    target_compile_definitions(ImGuiForms PRIVATE 
        WIN32_LEAN_AND_MEAN
        NOMINMAX
    )
endif()

# Build examples if requested
if(IMGUIFORMS_BUILD_EXAMPLES)
    add_subdirectory(examples)
endif()

# Build tests if requested  
if(IMGUIFORMS_BUILD_TESTS)
    enable_testing()
    add_subdirectory(tests)
endif()

# Build documentation if requested
if(IMGUIFORMS_BUILD_DOCS)
    find_package(Doxygen)
    if(DOXYGEN_FOUND)
        set(DOXYGEN_IN ${CMAKE_CURRENT_SOURCE_DIR}/docs/Doxyfile.in)
        set(DOXYGEN_OUT ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile)
        
        configure_file(${DOXYGEN_IN} ${DOXYGEN_OUT} @ONLY)
        
        add_custom_target(docs ALL
            COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYGEN_OUT}
            WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
            COMMENT "Generating API documentation with Doxygen"
            VERBATIM
        )
    endif()
endif()

# Installation
include(GNUInstallDirs)

# Install library
install(TARGETS ImGuiForms
    EXPORT ImGuiFormsTargets
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
    INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)

# Install headers
install(DIRECTORY include/ImGuiForms
    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
    FILES_MATCHING PATTERN "*.h"
)

# Install CMake config files
install(EXPORT ImGuiFormsTargets
    FILE ImGuiFormsTargets.cmake
    NAMESPACE ImGuiForms::
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/ImGuiForms
)

# Create config file
include(CMakePackageConfigHelpers)
write_basic_package_version_file(
    ImGuiFormsConfigVersion.cmake
    VERSION ${PROJECT_VERSION}
    COMPATIBILITY AnyNewerVersion
)

configure_package_config_file(
    cmake/ImGuiFormsConfig.cmake.in
    ImGuiFormsConfig.cmake
    INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/ImGuiForms
)

install(FILES
    "${CMAKE_CURRENT_BINARY_DIR}/ImGuiFormsConfig.cmake"
    "${CMAKE_CURRENT_BINARY_DIR}/ImGuiFormsConfigVersion.cmake"
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/ImGuiForms
)

# Export from build tree
export(EXPORT ImGuiFormsTargets
    FILE "${CMAKE_CURRENT_BINARY_DIR}/ImGuiFormsTargets.cmake"
    NAMESPACE ImGuiForms::
)

# Package creation with CPack
set(CPACK_PACKAGE_NAME "ImGuiForms")
set(CPACK_PACKAGE_VENDOR "ImGuiForms Community")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Object-oriented C++ framework around Dear ImGui")
set(CPACK_PACKAGE_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})
set(CPACK_PACKAGE_VERSION_MINOR ${PROJECT_VERSION_MINOR})
set(CPACK_PACKAGE_VERSION_PATCH ${PROJECT_VERSION_PATCH})
set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE")
set(CPACK_RESOURCE_FILE_README "${CMAKE_CURRENT_SOURCE_DIR}/README.md")

include(CPack)

# Print configuration summary
message(STATUS "ImGuiForms Configuration Summary:")
message(STATUS "  Version: ${PROJECT_VERSION}")
message(STATUS "  Build type: ${CMAKE_BUILD_TYPE}")
message(STATUS "  C++ standard: ${CMAKE_CXX_STANDARD}")
message(STATUS "  Build examples: ${IMGUIFORMS_BUILD_EXAMPLES}")
message(STATUS "  Build tests: ${IMGUIFORMS_BUILD_TESTS}")
message(STATUS "  Build docs: ${IMGUIFORMS_BUILD_DOCS}")
message(STATUS "  Install prefix: ${CMAKE_INSTALL_PREFIX}")